outputResult = calculateByPricer(input);
<<여기서 exception 발생.

PricingFactory의 static method: getPricer(pricerId)

input.getPricer().getId() : stepDown임
고로, static method가 return하는 값이 StepDownPricingFactory()

StepDownPricingFactory의 calculate method가 실행된다.

instrument.getExerciseEvents().getExerciseEvent() : List<ExerciseEvent> return

.filter(x -> x.getType() == ExerciseEventType.AUTOCALL)
:filtering한다. AutoCall type (ENUM) 인 경우만 새로운 stream에 포함.

findFirst(): stream에서 첫번째 요소를 뽑아낸다.
첫번째 요소가 없을 시에, throw Exception

getExercise(): List<Exercise> return한다.
mapToDouble(Double::doubleValue).toArray()
<<자주 쓰는 표현식, Double type을 element로 갖는 stream을 primitive double type을 갖는 Array로 변경한다.

Integer.parseInt

DataSetUtil의 static method: getInitPrices()
DataSetUtil의 getInitPrices 와 getInitPrice부터

CalculationType enum: PRICE_GREEK
CommonUtil의 static method: needGreeks: PRICE_GREEK일 시, True return

ModelParameter simulParam: SimCount: 시뮬레이션 횟수

double notional= instrument.getUnitAmount().getValue().doubleValue();
<DoubleValue: value를 double 타입으로 변환한다.

numOfAutoCall : size 6

String[] ETDates= autoCallEvent.getExercises().getExercise().stream().map(x -> x.getExerciseDate())
                .collect(Collectors.toList()).toArray(new String[numOfAutoCall]);
<<getExercises는 ArrayOfExercise object를 return. getExercise는 List<Exercise>를 return. 
List<Exercise>(collection type)를 stream으로 변경. 변경 후, map을 써서, Exercise의 stream을 exerciseDate의 stream
으로 변경.
.collect(Collectors.toList())<< list of exerciseDate return
numOfAutoCall 크기의 String Array를 만든다. 그리고 toArray메소드를 통해서, list를 메소드로 변환한다.

mapToDouble(Double::doubleValue): Double object를 primitive type double로 바꿔준다.

DataSetUtil의 static method: getInitPrices()
DataSetUtil의 getInitPrices 와 getInitPrice부터





